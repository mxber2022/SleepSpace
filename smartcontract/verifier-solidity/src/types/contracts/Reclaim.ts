/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace Reclaim {
  export type WitnessStruct = {
    addr: PromiseOrValue<string>;
    host: PromiseOrValue<string>;
  };

  export type WitnessStructOutput = [string, string] & {
    addr: string;
    host: string;
  };

  export type EpochStruct = {
    id: PromiseOrValue<BigNumberish>;
    timestampStart: PromiseOrValue<BigNumberish>;
    timestampEnd: PromiseOrValue<BigNumberish>;
    witnesses: Reclaim.WitnessStruct[];
    minimumWitnessesForClaimCreation: PromiseOrValue<BigNumberish>;
  };

  export type EpochStructOutput = [
    number,
    number,
    number,
    Reclaim.WitnessStructOutput[],
    number
  ] & {
    id: number;
    timestampStart: number;
    timestampEnd: number;
    witnesses: Reclaim.WitnessStructOutput[];
    minimumWitnessesForClaimCreation: number;
  };

  export type ProofStruct = {
    claimInfo: Claims.ClaimInfoStruct;
    signedClaim: Claims.SignedClaimStruct;
  };

  export type ProofStructOutput = [
    Claims.ClaimInfoStructOutput,
    Claims.SignedClaimStructOutput
  ] & {
    claimInfo: Claims.ClaimInfoStructOutput;
    signedClaim: Claims.SignedClaimStructOutput;
  };
}

export declare namespace Claims {
  export type ClaimInfoStruct = {
    provider: PromiseOrValue<string>;
    parameters: PromiseOrValue<string>;
    context: PromiseOrValue<string>;
  };

  export type ClaimInfoStructOutput = [string, string, string] & {
    provider: string;
    parameters: string;
    context: string;
  };

  export type CompleteClaimDataStruct = {
    identifier: PromiseOrValue<BytesLike>;
    owner: PromiseOrValue<string>;
    timestampS: PromiseOrValue<BigNumberish>;
    epoch: PromiseOrValue<BigNumberish>;
  };

  export type CompleteClaimDataStructOutput = [
    string,
    string,
    number,
    number
  ] & { identifier: string; owner: string; timestampS: number; epoch: number };

  export type SignedClaimStruct = {
    claim: Claims.CompleteClaimDataStruct;
    signatures: PromiseOrValue<BytesLike>[];
  };

  export type SignedClaimStructOutput = [
    Claims.CompleteClaimDataStructOutput,
    string[]
  ] & { claim: Claims.CompleteClaimDataStructOutput; signatures: string[] };
}

export interface ReclaimInterface extends utils.Interface {
  functions: {
    "addNewEpoch((address,string)[],uint8)": FunctionFragment;
    "currentEpoch()": FunctionFragment;
    "epochDurationS()": FunctionFragment;
    "epochs(uint256)": FunctionFragment;
    "fetchEpoch(uint32)": FunctionFragment;
    "fetchWitnessesForClaim(uint32,bytes32,uint32)": FunctionFragment;
    "owner()": FunctionFragment;
    "verifyProof(((string,string,string),((bytes32,address,uint32,uint32),bytes[])))": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addNewEpoch"
      | "currentEpoch"
      | "epochDurationS"
      | "epochs"
      | "fetchEpoch"
      | "fetchWitnessesForClaim"
      | "owner"
      | "verifyProof"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addNewEpoch",
    values: [Reclaim.WitnessStruct[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "currentEpoch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochDurationS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "epochs",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchEpoch",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchWitnessesForClaim",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "verifyProof",
    values: [Reclaim.ProofStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "addNewEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentEpoch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "epochDurationS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "epochs", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fetchEpoch", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fetchWitnessesForClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyProof",
    data: BytesLike
  ): Result;

  events: {
    "EpochAdded(tuple)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "EpochAdded"): EventFragment;
}

export interface EpochAddedEventObject {
  epoch: Reclaim.EpochStructOutput;
}
export type EpochAddedEvent = TypedEvent<
  [Reclaim.EpochStructOutput],
  EpochAddedEventObject
>;

export type EpochAddedEventFilter = TypedEventFilter<EpochAddedEvent>;

export interface Reclaim extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ReclaimInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addNewEpoch(
      witnesses: Reclaim.WitnessStruct[],
      requisiteWitnessesForClaimCreate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<[number]>;

    epochDurationS(overrides?: CallOverrides): Promise<[number]>;

    epochs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        id: number;
        timestampStart: number;
        timestampEnd: number;
        minimumWitnessesForClaimCreation: number;
      }
    >;

    fetchEpoch(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Reclaim.EpochStructOutput]>;

    fetchWitnessesForClaim(
      epoch: PromiseOrValue<BigNumberish>,
      identifier: PromiseOrValue<BytesLike>,
      timestampS: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[Reclaim.WitnessStructOutput[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    verifyProof(
      proof: Reclaim.ProofStruct,
      overrides?: CallOverrides
    ): Promise<[void]>;
  };

  addNewEpoch(
    witnesses: Reclaim.WitnessStruct[],
    requisiteWitnessesForClaimCreate: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentEpoch(overrides?: CallOverrides): Promise<number>;

  epochDurationS(overrides?: CallOverrides): Promise<number>;

  epochs(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [number, number, number, number] & {
      id: number;
      timestampStart: number;
      timestampEnd: number;
      minimumWitnessesForClaimCreation: number;
    }
  >;

  fetchEpoch(
    epoch: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Reclaim.EpochStructOutput>;

  fetchWitnessesForClaim(
    epoch: PromiseOrValue<BigNumberish>,
    identifier: PromiseOrValue<BytesLike>,
    timestampS: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<Reclaim.WitnessStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  verifyProof(
    proof: Reclaim.ProofStruct,
    overrides?: CallOverrides
  ): Promise<void>;

  callStatic: {
    addNewEpoch(
      witnesses: Reclaim.WitnessStruct[],
      requisiteWitnessesForClaimCreate: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    currentEpoch(overrides?: CallOverrides): Promise<number>;

    epochDurationS(overrides?: CallOverrides): Promise<number>;

    epochs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [number, number, number, number] & {
        id: number;
        timestampStart: number;
        timestampEnd: number;
        minimumWitnessesForClaimCreation: number;
      }
    >;

    fetchEpoch(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Reclaim.EpochStructOutput>;

    fetchWitnessesForClaim(
      epoch: PromiseOrValue<BigNumberish>,
      identifier: PromiseOrValue<BytesLike>,
      timestampS: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<Reclaim.WitnessStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    verifyProof(
      proof: Reclaim.ProofStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "EpochAdded(tuple)"(epoch?: null): EpochAddedEventFilter;
    EpochAdded(epoch?: null): EpochAddedEventFilter;
  };

  estimateGas: {
    addNewEpoch(
      witnesses: Reclaim.WitnessStruct[],
      requisiteWitnessesForClaimCreate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentEpoch(overrides?: CallOverrides): Promise<BigNumber>;

    epochDurationS(overrides?: CallOverrides): Promise<BigNumber>;

    epochs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchEpoch(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchWitnessesForClaim(
      epoch: PromiseOrValue<BigNumberish>,
      identifier: PromiseOrValue<BytesLike>,
      timestampS: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    verifyProof(
      proof: Reclaim.ProofStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addNewEpoch(
      witnesses: Reclaim.WitnessStruct[],
      requisiteWitnessesForClaimCreate: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentEpoch(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochDurationS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    epochs(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchEpoch(
      epoch: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchWitnessesForClaim(
      epoch: PromiseOrValue<BigNumberish>,
      identifier: PromiseOrValue<BytesLike>,
      timestampS: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyProof(
      proof: Reclaim.ProofStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
